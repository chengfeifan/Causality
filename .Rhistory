ccf
x<-c(1:10)
x
as.ts(x)
y<-c(-10:-1)
y
ts.intersect(as.ts(x), as.ts(y))
deparse(substitute(x))[1L]
acf(x)
acf
type <- match.arg(type)
type<-"Integer"
type <- match.arg(type)
macth.all
macth.call
match.call
?match.call
match.call(get, call("get", "abc", i = FALSE, p = 3))
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = match.call())
}
fun(4 * atan(1), u = pi)
fun(4 * atan(1), l = pi)
match.call()
m<-match.call()
m[[1L]]
m$type
?match.arg
ccf(x,y,type="cor")
ccf(x,y,type="cov")
?match.fun
# Same as get("*"):
match.fun("*")
# Overwrite outer with a vector
outer <- 1:5
try(match.fun(outer, descend = FALSE)) #-> Error:  not a function
match.fun(outer) # finds it anyway
is.function(match.fun("outer")) # as well
x<-as.ts(x)
frequency(x)
acf
?.Call
?match.arg
?match.call
match.call(get, call("get", "abc", i = FALSE, p = 3))
## -> get(x = "abc", pos = 3, inherits = FALSE)
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = match.call())
}
fun(4 * atan(1), u = pi)
ccf
acf
?sweep
sweep(x, 2, colMeans(x, na.rm = TRUE), check.margin = FALSE)
y<-as.ts(y)
ccf
X <- ts.intersect(x, y)
sweep(X, 2, colMeans(X, na.rm = TRUE), check.margin = FALSE)
## More sweeping:
A <- array(1:24, dim = 4:2)
## no warnings in normal use
sweep(A, 1, 5)
?rev
x <- c(1:5, 5:3)
sort(x)
rev(sort(x))
x
x <- c(1:5, 5:3)
x
acf
plot.acf
stats::plot.acf
plot.ecdf
demo(stats)
demo("stats")
demo(package = "stats")
demo(glm.vr,package = "stats")
demo(smooth,package = "stats")
?switch
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
CCM(1,2)
acf
arg
source('~/R-package/Causality/R/CCM.R')
CCM(1,2)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2)
CCM(1,2,3)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3)
CCM(1,2)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2)
CCM(1,2ï¼Œ3)
CCM(1,2,3,4)
CCM(1,2,3)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3)
CCM(1,2,3,4)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4)
switch(1, invisible(pi), pi)
switch(2, invisible(pi), pi)
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4)
CCM(1,2,3,4,5)
CCM(1,2,3)
CCM(1,2)
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4,5)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4,5)
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4,5)
CCM(1,2,3,4)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4,5)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4,5)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4)
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4,5)
CCM(1,2,3,4,5,6)
CCM(1,2,3,4,5,6,7)
CCM(1,2,3,4,5,6,7,8)
source('~/R-package/Causality/R/CCM.R')
CCM(1,2,3,4,5)
CCM(1,2,3,4,5,6)
CCM(1,2,3,4)
ccf
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
zeros(1,1)
?zeros
??zero
T
seq(30,10,-2)
seq(30,10,2)
array(0,dim=c(2,2,2))
rep(0,5)
?knn
??knn
library(knn)
library(class)
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
knn(train, test, cl, k = 3, prob=TRUE)
install.packages("FNN")
library("FNN", lib.loc="~/R-package/Causality/packrat/lib/x86_64-apple-darwin13.4.0/3.2.3")
library(FNN)
get.knn(data = matrix(1:4,ncol=2,nrow=2),query=c(1,1))
?get.knn
get.knnx(data = matrix(1:4,ncol=2,nrow=2),query=c(1,1))
get.knnx(data = matrix(1:4,ncol=2,nrow=2),query=martix(1,ncol=2,nrow=1)
)
get.knnx(data = matrix(1:4,ncol=2,nrow=2),query=matrix(1,ncol=2,nrow=1))
get.knnx(data = matrix(1:4,ncol=2,nrow=2),query=matrix(1,ncol=1,nrow=2))
get.knnx(data = matrix(1:4,ncol=2,nrow=2),query=matrix(1,ncol=1,nrow=2),k=1)
get.knnx(data = matrix(1:4,ncol=2,nrow=2),query=matrix(1,ncol=2,nrow=1),k=1)
data
get.knnx(data = matrix(1:4,ncol=2,nrow=2),query=matrix(1,ncol=2,nrow=1),k=1)
get.knnx(data = matrix(1:20,ncol=2),query=matrix(1,ncol=2,nrow=1),k=1)
get.knnx(data = matrix(1:20,ncol=2),query=matrix(1,ncol=2,nrow=1),k=4)
get.knnx(data = matrix(20:1,ncol=2),query=matrix(1,ncol=2,nrow=1),k=4)
result<-get.knnx(data = matrix(20:1,ncol=2),query=matrix(1,ncol=2,nrow=1),k=4)
library(parallel)
?clusterExport
?makeCluster
foreach(i=1:3) sqrt(i)
install.packages("foreach")
library(foreach)
foreach(i=1:3) sqrt(i)
foreach(i=1:3)
foreach(i=1:3)
sqrt(i)
foreach(i=1:3){
sqrt(i)
}
foreach(i=1:3) %do%
sqrt(i)
foreach(i=1:3) %dopar%
sqrt(i)
foreach(i=1:3, .combine=cbind) %dopar%
sqrt(i)
j=1:3
j
?get.knn
floor(4.5)
get.knnx(data = matrix(20:1,ncol=2),query=matrix(1,ncol=2,nrow=1),k=4)
source('~/R-package/Causality/R/CCM.R')
x=c(1:100)
y=c(100:1)
CCM(x,y,tau=1,E=2)
library(FNN)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
tau=1
E=2
L=length(x)
Ti=1+(E-1)*tau
Xm=matrix(0,nrow = L-Ti+1,ncol=E)
Ym=matrix(0,nrow = L-Ti+1,ncol=E)
SugiN=E+1
N=L-Ti+1
for(t in 1:N){
Xm[t,]<-x[seq((Ti+t-1),(Ti+t-1-(E-1)*tau),-tau)]
Ym[t,]<-y[seq((Ti+t-1),(Ti+t-1-(E-1)*tau),-tau)]
}
SugiX=rep(0,N)
SugiY=rep(0,N)
library(parallel)
cl<-makeCluster(getOption("cl.cores",8))
clusterEvalQ(cl,library(FNN))
dat<-floor((L-Ti+1)/2)
j=(dat+1):(L-Ti+1)
ii=dat+1
Xknn<-get.knnx(Xm[(ii-dat):(ii-1),],Xm[ii,],algorithm="kd_tree",SugiN)
Xm[(ii-dat):(ii-1),]
Xm[ii,]
Xknn<-get.knnx(Xm[(ii-dat):(ii-1),],as.matrix(Xm[ii,]),algorithm="kd_tree",SugiN)
as.matrix(Xm[ii,])
Xknn<-get.knnx(Xm[(ii-dat):(ii-1),],t(as.matrix(Xm[ii,])),algorithm="kd_tree",SugiN)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
rm(list=ls())
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
x<-c(1:100)
y<-c(100:1)
CCM(x,y,tau=1,E=2)
?"parLapply"
?parLapply
?"parApply"
mapply(rep, 1:4, 4:1)
mapply(rep, times = 1:4, x = 4:1)
parRapply(cl, x=c(1:10),function(i){i+1})
cl<-makeCluster(getOption("cl.cores",8))
parRapply(cl, x=c(1:10),function(i){i+1})
parRapply(cl, x,function(i){i+1})
?mapply
apply(c(1:10),1,function(x){x+1})
vapply(c(1:10),function(x){x+1})
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
?"foreach"
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
source('~/R-package/Causality/R/CCM.R')
cor(c(1:100),c(100:1))
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
source('~/R-package/Causality/R/CCM.R')
CCM(x,y,tau=1,E=2)
CCM(x,y,tau=1,E=2)
install.packages("testthat")
install.packages("devtools")
